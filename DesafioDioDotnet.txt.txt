Criando um APP simples de cadastro de s√©ries em .NET üé¨
Projeto desenvolvido durante a aula Desafio de Projeto: Criando um APP simples de cadastro de s√©ries em .NET ministrada pelo instrutor Eli√©zer Zarpel√£o como parte das atividades do bootcamp MRV .NET Developer oferecido pela MRV em parceria com a Digital Innovation One.

Objetivo
Criar um algoritmo simples de cadastro de s√©ries com objetivo de fixar o aprendizado sobre orienta√ß√£o a objetos, o principal paradigma de programa√ß√£o utilizada no mercado. Durante o desenvolvimento fixaremos os pensamentos relacionando a orientado a objetos (modelagem de dom√≠nio, utiliza√ß√£o de recursos e cole√ß√£o).

Adicionar s√©ries
Remover s√©ries
Listar s√©ries
Atualizar s√©ries
‚ùó Esse projeto n√£o implementa cone√ß√£o com banco de dados.

Conceitos iniciais
CRUD
CRUD √© o acr√¥nimo da express√£o do idioma Ingl√™s, Create (Cria√ß√£o), Read (Consulta), Update (Atualiza√ß√£o) e Delete (Destrui√ß√£o). Este acr√¥nimo √© comumente utilizado para definir as quatro opera√ß√µes b√°sicas usadas em Banco de Dados Relacionais.

Classes Abstratas
Uma classe abstrata tem o comportamento de uma "super classe" (classe pai), funciona apenas para ser herdada, n√£o permite que se crie inst√¢ncias, faz com que as subclasses herdadas (filhas) tenham a mesma hierarquia. Podendo conter m√©todos completos ou incompletos.

Uma classe abstrata n√£o suporta m√∫ltiplas heran√ßas. Assim, uma classe pode implementar v√°rias interfaces, mas apenas herdar de uma classe abstrata. Normalmente seus m√©todos s√£o abstratos. Esses m√©todos s√£o implementados nas classes herdadas concretas com o objetivo de definir o comportamento espec√≠fico. O m√©todo abstrato define apenas a assinatura do m√©todo, portanto, n√£o cont√©m c√≥digo. A classe filha ser√°, ent√£o, for√ßada a definir tais m√©todos, pois, caso contr√°rio, a classe filha tamb√©m se tornar√° abstrata.

Interfaces
Uma interface cont√©m defini√ß√µes para um grupo de funcionalidades relacionadas que uma classe n√£o abstrata ou uma struct deve implementar. Uma interface pode definir static m√©todos, que devem ter uma implementa√ß√£o. Uma interface n√£o pode declarar dados de inst√¢ncia, como campos, propriedades implementadas automaticamente ou eventos de propriedade.

Usando interfaces, voc√™ pode, por exemplo, incluir o comportamento de v√°rias fontes em uma classe. Essa funcionalidade √© importante em C# porque a linguagem n√£o d√° suporte a v√°rias heran√ßas de classes. Al√©m disso, use uma interface se voc√™ deseja simular a heran√ßa para structs, pois eles n√£o podem herdar de outro struct ou classe.